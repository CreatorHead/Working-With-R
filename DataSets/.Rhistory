# Assignments
x = 2
# Assignments
x = 1
y <- 3
### Functions
clear
clear()
clean()
### Functions
print("Hello World")
### Calculations
1 + 2
x + 5
y = x + 5
x = sqrt(16)
#Both '=' and '<-' are same
z = "Hello World"
z = 'Hello World'
res = num + str
res = num + str
num = 5
num + str
### Calling Functions
print("Hello World")
class(x)
### Data Types in R
# To find out the data type use the class() function
class(7)
x = 1.3
class(x)
x = 1.3
class(x)
x = 1.3
class(x)
class(state)
state = FALSE
class(state)
# Character
class('a')
# Vector: It's like list, sequence of the same data types. Elements in vector are called as Components
my_vector = c(3,7,11)
my_str_vector = c("Hello", "World", "From", "R")
# If you mix string and numberics, the whole vector becomes string vector
mix_vector = c(3,7,11,"hello")
# If you mix string and numberics, the whole vector becomes string vector
mix_vector = c(3,7,11,"hello")
class(mix_vector)
# Accessing components in a vector
mix_vector[3]
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2)
# Vector: It's like list, sequence of the same data types. Elements in vector are called as Components
my_vector = c(3,7,11,13)
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2)
my_matrix
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2) # It creates a vector of 2x2 and inserts the values from the given vector (my_vector)
1:9
my_matrix2 = matrix(1:9,nrow = 3,ncol = 3)
my_matrix2
my_matrix2
# To Access two dimensional vectors
my_matrix2[2][2]
# To Access two dimensional vectors
my_matrix2[2,2]
# If you provide only the row, it gives the entire row value
my_matrix[3,]
# If you provide only the row, it gives the entire row value
my_matrix2[3,]
# If you provide only the column, it gives the entire column values
my_matrix2[,3]
# Sub-Set of a matrix
my_matrix(1:2,1:2)
# Sub-Set of a matrix
my_matrix2(1:2,1:2)
# Sub-Set of a matrix
my_matrix2[1:2,1:2]
# Or we can substract the rows and columns to get the same output
my_matrix2[-3,-3]
my_data_frame = data.frame(my_vector, my_str_vector)
summary(Titanic)
# Importing Data in R
library("readr")
setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
getwd() # To get the working directory
# Imporing text docs with space separated values
Titanic = read.table("Titanic_space_separated-1.txt",header = TRUE)
class(Titanic)
# To view the Dataset
View(Titanic)
# To view data of the first 10 rows (Head means from begining)
head(Titanic,10)
# To view the last 5 rows
tail(Titanic, 5)
# To see the Overview
str(Titanic)
Titanic$Sex # To access the Sex column as factor (factor means any type of character variable)
Titanic$Sex = as.character(Titanic$Sex) # To treat it like chars in R
Titanic$Sex
# To get the summary of the dataset
summary(Titanic)
# Lets convert the Sex from character variable to factor
Titanic$Sex = as.factor(Titanic$Sex)
summary(Titanic)
summary(Titanic)
Orange = read.table("Orange_comma_separated",header = TRUE, sep = ",") # sep to declare the comma seperated value
Orange = read.table("Orange_comma_separated.txt",header = TRUE, sep = ",") # sep to declare the comma seperated value
View(Orange)
View(Orange)
View(Orange)
class(Orange)
summary(Orange)
Orange$Tree = as.factor()
summary(Oragne)
summary(Orange)
Orange$Tree = as.factor()
Orange$Tree = as.factor(Orange$Tree)
summary(Orange)
summary(Orange)
library("readr")
library("readr")
# Importing .csv file
library('readr')
Countires = read_csv("Countries+Population.csv")
View(Countires)
View(Countires)
summary(Countires)
Countires$`Country Name` = as.factor(Countires$`Country Name`)
Countires$`Country Code` = as.factor(Countires$`Country Code`)
summary(Countires)
# Import excel documents
install.packages('readxl')
library('readxl')
CountiresMapping = read_excel("Countries Region Mapping.xlsx")
View(CountiresMapping)
View(CountiresMapping)
Countires_region = read_excel("Countries Region Mapping.xlsx")
class(Countires_region)
Countires_region = as.data.frame(Countires_region) #To Convert into a dataframe
class(Countires_region)
