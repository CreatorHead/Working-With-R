# Assignments
x = 2
# Assignments
x = 1
y <- 3
### Functions
clear
clear()
clean()
### Functions
print("Hello World")
### Calculations
1 + 2
x + 5
y = x + 5
x = sqrt(16)
#Both '=' and '<-' are same
z = "Hello World"
z = 'Hello World'
res = num + str
res = num + str
num = 5
num + str
### Calling Functions
print("Hello World")
class(x)
### Data Types in R
# To find out the data type use the class() function
class(7)
x = 1.3
class(x)
x = 1.3
class(x)
x = 1.3
class(x)
class(state)
state = FALSE
class(state)
# Character
class('a')
# Vector: It's like list, sequence of the same data types. Elements in vector are called as Components
my_vector = c(3,7,11)
my_str_vector = c("Hello", "World", "From", "R")
# If you mix string and numberics, the whole vector becomes string vector
mix_vector = c(3,7,11,"hello")
# If you mix string and numberics, the whole vector becomes string vector
mix_vector = c(3,7,11,"hello")
class(mix_vector)
# Accessing components in a vector
mix_vector[3]
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2)
# Vector: It's like list, sequence of the same data types. Elements in vector are called as Components
my_vector = c(3,7,11,13)
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2)
my_matrix
# R matrix (It's line n dimensional array)
my_matrix = matrix(my_vector, nrow = 2, ncol = 2) # It creates a vector of 2x2 and inserts the values from the given vector (my_vector)
1:9
my_matrix2 = matrix(1:9,nrow = 3,ncol = 3)
my_matrix2
my_matrix2
# To Access two dimensional vectors
my_matrix2[2][2]
# To Access two dimensional vectors
my_matrix2[2,2]
# If you provide only the row, it gives the entire row value
my_matrix[3,]
# If you provide only the row, it gives the entire row value
my_matrix2[3,]
# If you provide only the column, it gives the entire column values
my_matrix2[,3]
# Sub-Set of a matrix
my_matrix(1:2,1:2)
# Sub-Set of a matrix
my_matrix2(1:2,1:2)
# Sub-Set of a matrix
my_matrix2[1:2,1:2]
# Or we can substract the rows and columns to get the same output
my_matrix2[-3,-3]
my_data_frame = data.frame(my_vector, my_str_vector)
### Summary Tables
## Contengency Table: Use tables(cat_var1, cat_var2) (where cat_var1 and cat_var2 are categorial
# categorial variables) to obtain the observations count for each combination of these variables' levels
## Diverse summery tables: Use data % > % group_by(cat_var1) % > % summarise() from the
# "Dplyr" package to aggregate datasets and obtain the summary numbers you want.
# Import Libraries
library(readr)
library((readxl))
## Setting up the Working directory
setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import first dataset
Countries = read_csv("Countries+Population.csv")
summary(Countries)
# Clean column names and set right data types
colnames(Countries) = make.names(colnames(Countries))
Countries$Country.Name = as.factor(Countries$Country.Name)
Countries$Country.Code = as.factor(Countries$Country.Code)
summary(Countries)
# Import second dataset
Countries_Map = readxl::read_excel("Countries Region Mapping.xlsx")
View(Countries_Map)
# Set right data types
Countries_Map$Country.Code = as.factor(Countries_Map$Country.Code)
Countries_Map$Region = as.factor(Countries_Map$Region)
Countries_Map$IncomeGroup = as.factor(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Set to ordered factor, and give order
Countries_Map$IncomeGroup = ordered(Countries_Map$IncomeGroup, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
class(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Import Third Dataset
Countries_Info = read_csv("Countries+Indicators.csv")
colnames(Countries_Info) = make.names(colnames(Countries_Info))
Countries_Info$Country.Code = as.factor(Countri)
summary(Countries_Info)
# Correct Inner Join
Countries_All = merge(Countries, Countries_Map, by = "Country.Code")
# Correct Left Join
Countries_All = merge(Countries_All, Countries_Info, by = "Country.Code", all.x = TRUE)
# Correct Inner Join
Countries_All = merge(Countries, Countries_Map, by = "Country.Code")
# Correct Left Join
Countries_All = merge(Countries_All, Countries_Info, by = "Country.Code", all.x = TRUE)
## table()
Region_vs_Income_Cat = table(Countries_All$Region, Countries_All$)
## table()
Region_vs_Income_Cat = table(Countries_All$Region, Countries_All$IncomeGroup)
Region_vs_Income_Cat
prop.table(Region_vs_Income_Cat, 1) # Row Total is 1
### Summary Tables
## Contengency Table: Use tables(cat_var1, cat_var2) (where cat_var1 and cat_var2 are categorial
# categorial variables) to obtain the observations count for each combination of these variables' levels
## Diverse summery tables: Use data % > % group_by(cat_var1) % > % summarise() from the
# "Dplyr" package to aggregate datasets and obtain the summary numbers you want.
# Import Libraries
library(readr)
library((readxl))
## Setting up the Working directory
setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import first dataset
Countries = read_csv("Countries+Population.csv")
summary(Countries)
# Clean column names and set right data types
colnames(Countries) = make.names(colnames(Countries))
Countries$Country.Name = as.factor(Countries$Country.Name)
Countries$Country.Code = as.factor(Countries$Country.Code)
summary(Countries)
# Import second dataset
Countries_Map = readxl::read_excel("Countries Region Mapping.xlsx")
View(Countries_Map)
# Set right data types
Countries_Map$Country.Code = as.factor(Countries_Map$Country.Code)
Countries_Map$Region = as.factor(Countries_Map$Region)
Countries_Map$IncomeGroup = as.factor(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Set to ordered factor, and give order
Countries_Map$IncomeGroup = ordered(Countries_Map$IncomeGroup, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
class(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Import Third Dataset
Countries_Info = read_csv("Countries+Indicators.csv")
colnames(Countries_Info) = make.names(colnames(Countries_Info))
Countries_Info$Country.Code = as.factor(Countri)
summary(Countries_Info)
# Correct Inner Join
Countries_All = merge(Countries, Countries_Map, by = "Country.Code")
# Correct Left Join
Countries_All = merge(Countries_All, Countries_Info, by = "Country.Code", all.x = TRUE)
## table()
Region_vs_Income_Cat = table(Countries_All$Region, Countries_All$IncomeGroup)
Region_vs_Income_Cat
prop.table(Region_vs_Income_Cat, 1) # Row Total is 1
Region_vs_Income_Cat
Region_vs_Income_Cat
prop.table(Region_vs_Income_Cat, 1) # Row Total is 1
prop.table(Region_vs_Income_Cat, 2) # Column Total is equal to 1
## %>% group_by()
install.packages("dblyr")
library(dblyr)
library(dplyr)
## %>% group_by()
install.packages("dplyr")
library(dplyr)
library(dplyr)
clear
library(dplyr)
# Extract the different Regions
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup)
Region_Income_Sum
# Extract the different Regions
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise()
Region_Income_Sum
View(Region_Income_Sum)
# Extract the different Regions
Region_Sum = Countries_All %>% group_by(Region) %>% summarise()
View(Region_Sum)
View(Region_Sum)
# Extract different combination of Regions and Income Groups
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise()
View(Region_Income_Sum)
# Same with amount of countries in each categories
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Count = n())
Region_Income_Sum
View(Region_Income_Sum)
# Same with amount of countries in each categories
# Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Count = n())
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Number.Of.Countries = n())
View(Region_Income_Sum)
# Amount of different income groups per region
Region_sum = Countries_All %>% group_by(Region) %>% summarise(Different.Income.Groups = n_distinct(IncomeGroup))
View(Region_sum)
# Amount of different income groups per region
Region_sum = Countries_All %>% group_by(Region) %>% summarise(Different.Income.Groups = n_distinct(IncomeGroup))
View(Region_sum)
Countries_All$IncomeGroup
Countries_All
Countries_All$IncomeGroup
Countries_All
Region_sum= Countries_All %>% group_by(Region) %>% summarise(Number.of.Countries = n(),
Total.Population.In.Million = sum (Total.Population.2017)/1000000,
Countries.With.Low.Income = sum(IncomeGroup == "Low income"),
Average.GDP.per.Capita= mean(GDP.per.capita.2017, na.rm= TRUE),
Median.GDP.per.Capita= median(GDP.per.capita.2017, na.rm= TRUE),
Std.Deviation.GDP.per.Capita = sd(GDP.per.capita.2017, na.rm= TRUE),
Min.Under.5.Mortality.Rate = min(Under.5.Mortality.Rate.2017,na.rm=TRUE),
Max.Under.5.Mortality.Rate = max(Under.5.Mortality.Rate.2017,na.rm=TRUE))
View(Region_sum)
